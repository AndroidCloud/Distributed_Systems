// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "project.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BlockReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataNodeLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataNodeLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockLocations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockLocations_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockLocationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockLocationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockLocationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListFilesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListFilesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListFilesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListFilesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadBlockResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_project_2eproto() {
  protobuf_AddDesc_project_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "project.proto");
  GOOGLE_CHECK(file != NULL);
  BlockReportRequest_descriptor_ = file->message_type(0);
  static const int BlockReportRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportRequest, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportRequest, blocknumbers_),
  };
  BlockReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockReportRequest_descriptor_,
      BlockReportRequest::default_instance_,
      BlockReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockReportRequest));
  BlockReportResponse_descriptor_ = file->message_type(1);
  static const int BlockReportResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportResponse, status_),
  };
  BlockReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockReportResponse_descriptor_,
      BlockReportResponse::default_instance_,
      BlockReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockReportResponse));
  HeartBeatRequest_descriptor_ = file->message_type(2);
  static const int HeartBeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, id_),
  };
  HeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatRequest_descriptor_,
      HeartBeatRequest::default_instance_,
      HeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatRequest));
  HeartBeatResponse_descriptor_ = file->message_type(3);
  static const int HeartBeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, status_),
  };
  HeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatResponse_descriptor_,
      HeartBeatResponse::default_instance_,
      HeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatResponse));
  WriteBlockRequest_descriptor_ = file->message_type(4);
  static const int WriteBlockRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockRequest, blockinfo_),
  };
  WriteBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteBlockRequest_descriptor_,
      WriteBlockRequest::default_instance_,
      WriteBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteBlockRequest));
  WriteBlockResponse_descriptor_ = file->message_type(5);
  static const int WriteBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockResponse, status_),
  };
  WriteBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteBlockResponse_descriptor_,
      WriteBlockResponse::default_instance_,
      WriteBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteBlockResponse));
  CloseFileRequest_descriptor_ = file->message_type(6);
  static const int CloseFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileRequest, handle_),
  };
  CloseFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFileRequest_descriptor_,
      CloseFileRequest::default_instance_,
      CloseFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFileRequest));
  CloseFileResponse_descriptor_ = file->message_type(7);
  static const int CloseFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileResponse, status_),
  };
  CloseFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFileResponse_descriptor_,
      CloseFileResponse::default_instance_,
      CloseFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFileResponse));
  DataNodeLocation_descriptor_ = file->message_type(8);
  static const int DataNodeLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeLocation, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeLocation, port_),
  };
  DataNodeLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataNodeLocation_descriptor_,
      DataNodeLocation::default_instance_,
      DataNodeLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataNodeLocation));
  BlockLocations_descriptor_ = file->message_type(9);
  static const int BlockLocations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocations, blocknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocations, locations_),
  };
  BlockLocations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockLocations_descriptor_,
      BlockLocations::default_instance_,
      BlockLocations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockLocations));
  BlockLocationRequest_descriptor_ = file->message_type(10);
  static const int BlockLocationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationRequest, blocknums_),
  };
  BlockLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockLocationRequest_descriptor_,
      BlockLocationRequest::default_instance_,
      BlockLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockLocationRequest));
  BlockLocationResponse_descriptor_ = file->message_type(11);
  static const int BlockLocationResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationResponse, blocklocations_),
  };
  BlockLocationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockLocationResponse_descriptor_,
      BlockLocationResponse::default_instance_,
      BlockLocationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockLocationResponse));
  AssignBlockRequest_descriptor_ = file->message_type(12);
  static const int AssignBlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockRequest, handle_),
  };
  AssignBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignBlockRequest_descriptor_,
      AssignBlockRequest::default_instance_,
      AssignBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignBlockRequest));
  AssignBlockResponse_descriptor_ = file->message_type(13);
  static const int AssignBlockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockResponse, newblock_),
  };
  AssignBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignBlockResponse_descriptor_,
      AssignBlockResponse::default_instance_,
      AssignBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignBlockResponse));
  ListFilesRequest_descriptor_ = file->message_type(14);
  static const int ListFilesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesRequest, dirname_),
  };
  ListFilesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListFilesRequest_descriptor_,
      ListFilesRequest::default_instance_,
      ListFilesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListFilesRequest));
  ListFilesResponse_descriptor_ = file->message_type(15);
  static const int ListFilesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesResponse, filenames_),
  };
  ListFilesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListFilesResponse_descriptor_,
      ListFilesResponse::default_instance_,
      ListFilesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFilesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListFilesResponse));
  OpenFileRequest_descriptor_ = file->message_type(16);
  static const int OpenFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileRequest, forread_),
  };
  OpenFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenFileRequest_descriptor_,
      OpenFileRequest::default_instance_,
      OpenFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenFileRequest));
  OpenFileResponse_descriptor_ = file->message_type(17);
  static const int OpenFileResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileResponse, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileResponse, blockinfo_),
  };
  OpenFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenFileResponse_descriptor_,
      OpenFileResponse::default_instance_,
      OpenFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenFileResponse));
  ReadBlockRequest_descriptor_ = file->message_type(18);
  static const int ReadBlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockRequest, blocknumber_),
  };
  ReadBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadBlockRequest_descriptor_,
      ReadBlockRequest::default_instance_,
      ReadBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadBlockRequest));
  ReadBlockResponse_descriptor_ = file->message_type(19);
  static const int ReadBlockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockResponse, data_),
  };
  ReadBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadBlockResponse_descriptor_,
      ReadBlockResponse::default_instance_,
      ReadBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadBlockResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_project_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockReportRequest_descriptor_, &BlockReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockReportResponse_descriptor_, &BlockReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatRequest_descriptor_, &HeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatResponse_descriptor_, &HeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteBlockRequest_descriptor_, &WriteBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteBlockResponse_descriptor_, &WriteBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFileRequest_descriptor_, &CloseFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFileResponse_descriptor_, &CloseFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataNodeLocation_descriptor_, &DataNodeLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockLocations_descriptor_, &BlockLocations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockLocationRequest_descriptor_, &BlockLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockLocationResponse_descriptor_, &BlockLocationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignBlockRequest_descriptor_, &AssignBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignBlockResponse_descriptor_, &AssignBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListFilesRequest_descriptor_, &ListFilesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListFilesResponse_descriptor_, &ListFilesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenFileRequest_descriptor_, &OpenFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenFileResponse_descriptor_, &OpenFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadBlockRequest_descriptor_, &ReadBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadBlockResponse_descriptor_, &ReadBlockResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_project_2eproto() {
  delete BlockReportRequest::default_instance_;
  delete BlockReportRequest_reflection_;
  delete BlockReportResponse::default_instance_;
  delete BlockReportResponse_reflection_;
  delete HeartBeatRequest::default_instance_;
  delete HeartBeatRequest_reflection_;
  delete HeartBeatResponse::default_instance_;
  delete HeartBeatResponse_reflection_;
  delete WriteBlockRequest::default_instance_;
  delete WriteBlockRequest_reflection_;
  delete WriteBlockResponse::default_instance_;
  delete WriteBlockResponse_reflection_;
  delete CloseFileRequest::default_instance_;
  delete CloseFileRequest_reflection_;
  delete CloseFileResponse::default_instance_;
  delete CloseFileResponse_reflection_;
  delete DataNodeLocation::default_instance_;
  delete DataNodeLocation_reflection_;
  delete BlockLocations::default_instance_;
  delete BlockLocations_reflection_;
  delete BlockLocationRequest::default_instance_;
  delete BlockLocationRequest_reflection_;
  delete BlockLocationResponse::default_instance_;
  delete BlockLocationResponse_reflection_;
  delete AssignBlockRequest::default_instance_;
  delete AssignBlockRequest_reflection_;
  delete AssignBlockResponse::default_instance_;
  delete AssignBlockResponse_reflection_;
  delete ListFilesRequest::default_instance_;
  delete ListFilesRequest_reflection_;
  delete ListFilesResponse::default_instance_;
  delete ListFilesResponse_reflection_;
  delete OpenFileRequest::default_instance_;
  delete OpenFileRequest_reflection_;
  delete OpenFileResponse::default_instance_;
  delete OpenFileResponse_reflection_;
  delete ReadBlockRequest::default_instance_;
  delete ReadBlockRequest_reflection_;
  delete ReadBlockResponse::default_instance_;
  delete ReadBlockResponse_reflection_;
}

void protobuf_AddDesc_project_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rproject.proto\"[\n\022BlockReportRequest\022\n\n"
    "\002id\030\001 \001(\005\022#\n\010location\030\002 \001(\0132\021.DataNodeLo"
    "cation\022\024\n\014blockNumbers\030\003 \003(\005\"%\n\023BlockRep"
    "ortResponse\022\016\n\006status\030\001 \003(\005\"\036\n\020HeartBeat"
    "Request\022\n\n\002id\030\001 \001(\005\"#\n\021HeartBeatResponse"
    "\022\016\n\006status\030\001 \001(\005\"E\n\021WriteBlockRequest\022\014\n"
    "\004data\030\001 \003(\014\022\"\n\tblockInfo\030\002 \001(\0132\017.BlockLo"
    "cations\"$\n\022WriteBlockResponse\022\016\n\006status\030"
    "\001 \001(\005\"\"\n\020CloseFileRequest\022\016\n\006handle\030\001 \001("
    "\005\"#\n\021CloseFileResponse\022\016\n\006status\030\001 \001(\005\","
    "\n\020DataNodeLocation\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002"
    " \001(\005\"K\n\016BlockLocations\022\023\n\013blockNumber\030\001 "
    "\001(\005\022$\n\tlocations\030\002 \003(\0132\021.DataNodeLocatio"
    "n\")\n\024BlockLocationRequest\022\021\n\tblockNums\030\001"
    " \003(\005\"P\n\025BlockLocationResponse\022\016\n\006status\030"
    "\001 \001(\005\022\'\n\016blockLocations\030\002 \003(\0132\017.BlockLoc"
    "ations\"$\n\022AssignBlockRequest\022\016\n\006handle\030\001"
    " \001(\005\"H\n\023AssignBlockResponse\022\016\n\006status\030\001 "
    "\001(\005\022!\n\010newBlock\030\002 \001(\0132\017.BlockLocations\"#"
    "\n\020ListFilesRequest\022\017\n\007dirName\030\001 \001(\t\"6\n\021L"
    "istFilesResponse\022\016\n\006status\030\001 \001(\005\022\021\n\tfile"
    "Names\030\002 \003(\t\"4\n\017OpenFileRequest\022\020\n\010fileNa"
    "me\030\001 \001(\t\022\017\n\007forRead\030\002 \001(\010\"V\n\020OpenFileRes"
    "ponse\022\016\n\006status\030\001 \001(\005\022\016\n\006handle\030\002 \001(\005\022\"\n"
    "\tblockInfo\030\003 \003(\0132\017.BlockLocations\"\'\n\020Rea"
    "dBlockRequest\022\023\n\013blockNumber\030\001 \001(\005\"1\n\021Re"
    "adBlockResponse\022\016\n\006status\030\001 \001(\005\022\014\n\004data\030"
    "\002 \003(\014", 1085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "project.proto", &protobuf_RegisterTypes);
  BlockReportRequest::default_instance_ = new BlockReportRequest();
  BlockReportResponse::default_instance_ = new BlockReportResponse();
  HeartBeatRequest::default_instance_ = new HeartBeatRequest();
  HeartBeatResponse::default_instance_ = new HeartBeatResponse();
  WriteBlockRequest::default_instance_ = new WriteBlockRequest();
  WriteBlockResponse::default_instance_ = new WriteBlockResponse();
  CloseFileRequest::default_instance_ = new CloseFileRequest();
  CloseFileResponse::default_instance_ = new CloseFileResponse();
  DataNodeLocation::default_instance_ = new DataNodeLocation();
  BlockLocations::default_instance_ = new BlockLocations();
  BlockLocationRequest::default_instance_ = new BlockLocationRequest();
  BlockLocationResponse::default_instance_ = new BlockLocationResponse();
  AssignBlockRequest::default_instance_ = new AssignBlockRequest();
  AssignBlockResponse::default_instance_ = new AssignBlockResponse();
  ListFilesRequest::default_instance_ = new ListFilesRequest();
  ListFilesResponse::default_instance_ = new ListFilesResponse();
  OpenFileRequest::default_instance_ = new OpenFileRequest();
  OpenFileResponse::default_instance_ = new OpenFileResponse();
  ReadBlockRequest::default_instance_ = new ReadBlockRequest();
  ReadBlockResponse::default_instance_ = new ReadBlockResponse();
  BlockReportRequest::default_instance_->InitAsDefaultInstance();
  BlockReportResponse::default_instance_->InitAsDefaultInstance();
  HeartBeatRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatResponse::default_instance_->InitAsDefaultInstance();
  WriteBlockRequest::default_instance_->InitAsDefaultInstance();
  WriteBlockResponse::default_instance_->InitAsDefaultInstance();
  CloseFileRequest::default_instance_->InitAsDefaultInstance();
  CloseFileResponse::default_instance_->InitAsDefaultInstance();
  DataNodeLocation::default_instance_->InitAsDefaultInstance();
  BlockLocations::default_instance_->InitAsDefaultInstance();
  BlockLocationRequest::default_instance_->InitAsDefaultInstance();
  BlockLocationResponse::default_instance_->InitAsDefaultInstance();
  AssignBlockRequest::default_instance_->InitAsDefaultInstance();
  AssignBlockResponse::default_instance_->InitAsDefaultInstance();
  ListFilesRequest::default_instance_->InitAsDefaultInstance();
  ListFilesResponse::default_instance_->InitAsDefaultInstance();
  OpenFileRequest::default_instance_->InitAsDefaultInstance();
  OpenFileResponse::default_instance_->InitAsDefaultInstance();
  ReadBlockRequest::default_instance_->InitAsDefaultInstance();
  ReadBlockResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_project_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_project_2eproto {
  StaticDescriptorInitializer_project_2eproto() {
    protobuf_AddDesc_project_2eproto();
  }
} static_descriptor_initializer_project_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BlockReportRequest::kIdFieldNumber;
const int BlockReportRequest::kLocationFieldNumber;
const int BlockReportRequest::kBlockNumbersFieldNumber;
#endif  // !_MSC_VER

BlockReportRequest::BlockReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockReportRequest)
}

void BlockReportRequest::InitAsDefaultInstance() {
  location_ = const_cast< ::DataNodeLocation*>(&::DataNodeLocation::default_instance());
}

BlockReportRequest::BlockReportRequest(const BlockReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockReportRequest)
}

void BlockReportRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockReportRequest::~BlockReportRequest() {
  // @@protoc_insertion_point(destructor:BlockReportRequest)
  SharedDtor();
}

void BlockReportRequest::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void BlockReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockReportRequest_descriptor_;
}

const BlockReportRequest& BlockReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

BlockReportRequest* BlockReportRequest::default_instance_ = NULL;

BlockReportRequest* BlockReportRequest::New() const {
  return new BlockReportRequest;
}

void BlockReportRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::DataNodeLocation::Clear();
    }
  }
  blocknumbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // optional .DataNodeLocation location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blockNumbers;
        break;
      }

      // repeated int32 blockNumbers = 3;
      case 3: {
        if (tag == 24) {
         parse_blockNumbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_blocknumbers())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blocknumbers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blockNumbers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockReportRequest)
  return false;
#undef DO_
}

void BlockReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockReportRequest)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .DataNodeLocation location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location(), output);
  }

  // repeated int32 blockNumbers = 3;
  for (int i = 0; i < this->blocknumbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->blocknumbers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlockReportRequest)
}

::google::protobuf::uint8* BlockReportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockReportRequest)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .DataNodeLocation location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }

  // repeated int32 blockNumbers = 3;
  for (int i = 0; i < this->blocknumbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->blocknumbers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockReportRequest)
  return target;
}

int BlockReportRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .DataNodeLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  // repeated int32 blockNumbers = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocknumbers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blocknumbers(i));
    }
    total_size += 1 * this->blocknumbers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockReportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockReportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockReportRequest::MergeFrom(const BlockReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocknumbers_.MergeFrom(from.blocknumbers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_location()) {
      mutable_location()->::DataNodeLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockReportRequest::CopyFrom(const BlockReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReportRequest::IsInitialized() const {

  return true;
}

void BlockReportRequest::Swap(BlockReportRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(location_, other->location_);
    blocknumbers_.Swap(&other->blocknumbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockReportRequest_descriptor_;
  metadata.reflection = BlockReportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockReportResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

BlockReportResponse::BlockReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockReportResponse)
}

void BlockReportResponse::InitAsDefaultInstance() {
}

BlockReportResponse::BlockReportResponse(const BlockReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockReportResponse)
}

void BlockReportResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockReportResponse::~BlockReportResponse() {
  // @@protoc_insertion_point(destructor:BlockReportResponse)
  SharedDtor();
}

void BlockReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockReportResponse_descriptor_;
}

const BlockReportResponse& BlockReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

BlockReportResponse* BlockReportResponse::default_instance_ = NULL;

BlockReportResponse* BlockReportResponse::New() const {
  return new BlockReportResponse;
}

void BlockReportResponse::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 status = 1;
      case 1: {
        if (tag == 8) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_status())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_status;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockReportResponse)
  return false;
#undef DO_
}

void BlockReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockReportResponse)
  // repeated int32 status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlockReportResponse)
}

::google::protobuf::uint8* BlockReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockReportResponse)
  // repeated int32 status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockReportResponse)
  return target;
}

int BlockReportResponse::ByteSize() const {
  int total_size = 0;

  // repeated int32 status = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->status(i));
    }
    total_size += 1 * this->status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockReportResponse::MergeFrom(const BlockReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockReportResponse::CopyFrom(const BlockReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReportResponse::IsInitialized() const {

  return true;
}

void BlockReportResponse::Swap(BlockReportResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockReportResponse_descriptor_;
  metadata.reflection = BlockReportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatRequest::kIdFieldNumber;
#endif  // !_MSC_VER

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatRequest)
}

void HeartBeatRequest::InitAsDefaultInstance() {
}

HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRequest_descriptor_;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

HeartBeatRequest* HeartBeatRequest::default_instance_ = NULL;

HeartBeatRequest* HeartBeatRequest::New() const {
  return new HeartBeatRequest;
}

void HeartBeatRequest::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatRequest)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartBeatRequest)
}

::google::protobuf::uint8* HeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatRequest)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatRequest)
  return target;
}

int HeartBeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {

  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRequest_descriptor_;
  metadata.reflection = HeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatResponse)
}

void HeartBeatResponse::InitAsDefaultInstance() {
}

HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatResponse_descriptor_;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

HeartBeatResponse* HeartBeatResponse::default_instance_ = NULL;

HeartBeatResponse* HeartBeatResponse::New() const {
  return new HeartBeatResponse;
}

void HeartBeatResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatResponse)
  return false;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartBeatResponse)
}

::google::protobuf::uint8* HeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatResponse)
  return target;
}

int HeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {

  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatResponse_descriptor_;
  metadata.reflection = HeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteBlockRequest::kDataFieldNumber;
const int WriteBlockRequest::kBlockInfoFieldNumber;
#endif  // !_MSC_VER

WriteBlockRequest::WriteBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteBlockRequest)
}

void WriteBlockRequest::InitAsDefaultInstance() {
  blockinfo_ = const_cast< ::BlockLocations*>(&::BlockLocations::default_instance());
}

WriteBlockRequest::WriteBlockRequest(const WriteBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WriteBlockRequest)
}

void WriteBlockRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  blockinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteBlockRequest::~WriteBlockRequest() {
  // @@protoc_insertion_point(destructor:WriteBlockRequest)
  SharedDtor();
}

void WriteBlockRequest::SharedDtor() {
  if (this != default_instance_) {
    delete blockinfo_;
  }
}

void WriteBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteBlockRequest_descriptor_;
}

const WriteBlockRequest& WriteBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

WriteBlockRequest* WriteBlockRequest::default_instance_ = NULL;

WriteBlockRequest* WriteBlockRequest::New() const {
  return new WriteBlockRequest;
}

void WriteBlockRequest::Clear() {
  if (has_blockinfo()) {
    if (blockinfo_ != NULL) blockinfo_->::BlockLocations::Clear();
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_blockInfo;
        break;
      }

      // optional .BlockLocations blockInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_blockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteBlockRequest)
  return false;
#undef DO_
}

void WriteBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteBlockRequest)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  // optional .BlockLocations blockInfo = 2;
  if (has_blockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blockinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WriteBlockRequest)
}

::google::protobuf::uint8* WriteBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteBlockRequest)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  // optional .BlockLocations blockInfo = 2;
  if (has_blockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blockinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteBlockRequest)
  return target;
}

int WriteBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .BlockLocations blockInfo = 2;
    if (has_blockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockinfo());
    }

  }
  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteBlockRequest::MergeFrom(const WriteBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_blockinfo()) {
      mutable_blockinfo()->::BlockLocations::MergeFrom(from.blockinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteBlockRequest::CopyFrom(const WriteBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBlockRequest::IsInitialized() const {

  return true;
}

void WriteBlockRequest::Swap(WriteBlockRequest* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(blockinfo_, other->blockinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteBlockRequest_descriptor_;
  metadata.reflection = WriteBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteBlockResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

WriteBlockResponse::WriteBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteBlockResponse)
}

void WriteBlockResponse::InitAsDefaultInstance() {
}

WriteBlockResponse::WriteBlockResponse(const WriteBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WriteBlockResponse)
}

void WriteBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteBlockResponse::~WriteBlockResponse() {
  // @@protoc_insertion_point(destructor:WriteBlockResponse)
  SharedDtor();
}

void WriteBlockResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteBlockResponse_descriptor_;
}

const WriteBlockResponse& WriteBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

WriteBlockResponse* WriteBlockResponse::default_instance_ = NULL;

WriteBlockResponse* WriteBlockResponse::New() const {
  return new WriteBlockResponse;
}

void WriteBlockResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteBlockResponse)
  return false;
#undef DO_
}

void WriteBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WriteBlockResponse)
}

::google::protobuf::uint8* WriteBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteBlockResponse)
  return target;
}

int WriteBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteBlockResponse::MergeFrom(const WriteBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteBlockResponse::CopyFrom(const WriteBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteBlockResponse::IsInitialized() const {

  return true;
}

void WriteBlockResponse::Swap(WriteBlockResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteBlockResponse_descriptor_;
  metadata.reflection = WriteBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseFileRequest::kHandleFieldNumber;
#endif  // !_MSC_VER

CloseFileRequest::CloseFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseFileRequest)
}

void CloseFileRequest::InitAsDefaultInstance() {
}

CloseFileRequest::CloseFileRequest(const CloseFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CloseFileRequest)
}

void CloseFileRequest::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFileRequest::~CloseFileRequest() {
  // @@protoc_insertion_point(destructor:CloseFileRequest)
  SharedDtor();
}

void CloseFileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFileRequest_descriptor_;
}

const CloseFileRequest& CloseFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

CloseFileRequest* CloseFileRequest::default_instance_ = NULL;

CloseFileRequest* CloseFileRequest::New() const {
  return new CloseFileRequest;
}

void CloseFileRequest::Clear() {
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseFileRequest)
  return false;
#undef DO_
}

void CloseFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseFileRequest)
  // optional int32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseFileRequest)
}

::google::protobuf::uint8* CloseFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CloseFileRequest)
  // optional int32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseFileRequest)
  return target;
}

int CloseFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFileRequest::MergeFrom(const CloseFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFileRequest::CopyFrom(const CloseFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFileRequest::IsInitialized() const {

  return true;
}

void CloseFileRequest::Swap(CloseFileRequest* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFileRequest_descriptor_;
  metadata.reflection = CloseFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseFileResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CloseFileResponse::CloseFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseFileResponse)
}

void CloseFileResponse::InitAsDefaultInstance() {
}

CloseFileResponse::CloseFileResponse(const CloseFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CloseFileResponse)
}

void CloseFileResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFileResponse::~CloseFileResponse() {
  // @@protoc_insertion_point(destructor:CloseFileResponse)
  SharedDtor();
}

void CloseFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFileResponse_descriptor_;
}

const CloseFileResponse& CloseFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

CloseFileResponse* CloseFileResponse::default_instance_ = NULL;

CloseFileResponse* CloseFileResponse::New() const {
  return new CloseFileResponse;
}

void CloseFileResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseFileResponse)
  return false;
#undef DO_
}

void CloseFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseFileResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseFileResponse)
}

::google::protobuf::uint8* CloseFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CloseFileResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseFileResponse)
  return target;
}

int CloseFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFileResponse::MergeFrom(const CloseFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFileResponse::CopyFrom(const CloseFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFileResponse::IsInitialized() const {

  return true;
}

void CloseFileResponse::Swap(CloseFileResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFileResponse_descriptor_;
  metadata.reflection = CloseFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataNodeLocation::kIpFieldNumber;
const int DataNodeLocation::kPortFieldNumber;
#endif  // !_MSC_VER

DataNodeLocation::DataNodeLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataNodeLocation)
}

void DataNodeLocation::InitAsDefaultInstance() {
}

DataNodeLocation::DataNodeLocation(const DataNodeLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataNodeLocation)
}

void DataNodeLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataNodeLocation::~DataNodeLocation() {
  // @@protoc_insertion_point(destructor:DataNodeLocation)
  SharedDtor();
}

void DataNodeLocation::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void DataNodeLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataNodeLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataNodeLocation_descriptor_;
}

const DataNodeLocation& DataNodeLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

DataNodeLocation* DataNodeLocation::default_instance_ = NULL;

DataNodeLocation* DataNodeLocation::New() const {
  return new DataNodeLocation;
}

void DataNodeLocation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataNodeLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataNodeLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataNodeLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataNodeLocation)
  return false;
#undef DO_
}

void DataNodeLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataNodeLocation)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataNodeLocation)
}

::google::protobuf::uint8* DataNodeLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataNodeLocation)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataNodeLocation)
  return target;
}

int DataNodeLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataNodeLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataNodeLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataNodeLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataNodeLocation::MergeFrom(const DataNodeLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataNodeLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataNodeLocation::CopyFrom(const DataNodeLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeLocation::IsInitialized() const {

  return true;
}

void DataNodeLocation::Swap(DataNodeLocation* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataNodeLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataNodeLocation_descriptor_;
  metadata.reflection = DataNodeLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockLocations::kBlockNumberFieldNumber;
const int BlockLocations::kLocationsFieldNumber;
#endif  // !_MSC_VER

BlockLocations::BlockLocations()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockLocations)
}

void BlockLocations::InitAsDefaultInstance() {
}

BlockLocations::BlockLocations(const BlockLocations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockLocations)
}

void BlockLocations::SharedCtor() {
  _cached_size_ = 0;
  blocknumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockLocations::~BlockLocations() {
  // @@protoc_insertion_point(destructor:BlockLocations)
  SharedDtor();
}

void BlockLocations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockLocations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockLocations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockLocations_descriptor_;
}

const BlockLocations& BlockLocations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

BlockLocations* BlockLocations::default_instance_ = NULL;

BlockLocations* BlockLocations::New() const {
  return new BlockLocations;
}

void BlockLocations::Clear() {
  blocknumber_ = 0;
  locations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockLocations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockLocations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blockNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknumber_)));
          set_has_blocknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locations;
        break;
      }

      // repeated .DataNodeLocation locations = 2;
      case 2: {
        if (tag == 18) {
         parse_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockLocations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockLocations)
  return false;
#undef DO_
}

void BlockLocations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockLocations)
  // optional int32 blockNumber = 1;
  if (has_blocknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blocknumber(), output);
  }

  // repeated .DataNodeLocation locations = 2;
  for (int i = 0; i < this->locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->locations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlockLocations)
}

::google::protobuf::uint8* BlockLocations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockLocations)
  // optional int32 blockNumber = 1;
  if (has_blocknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blocknumber(), target);
  }

  // repeated .DataNodeLocation locations = 2;
  for (int i = 0; i < this->locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->locations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockLocations)
  return target;
}

int BlockLocations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blockNumber = 1;
    if (has_blocknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknumber());
    }

  }
  // repeated .DataNodeLocation locations = 2;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockLocations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockLocations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockLocations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockLocations::MergeFrom(const BlockLocations& from) {
  GOOGLE_CHECK_NE(&from, this);
  locations_.MergeFrom(from.locations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocknumber()) {
      set_blocknumber(from.blocknumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockLocations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockLocations::CopyFrom(const BlockLocations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLocations::IsInitialized() const {

  return true;
}

void BlockLocations::Swap(BlockLocations* other) {
  if (other != this) {
    std::swap(blocknumber_, other->blocknumber_);
    locations_.Swap(&other->locations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockLocations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockLocations_descriptor_;
  metadata.reflection = BlockLocations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockLocationRequest::kBlockNumsFieldNumber;
#endif  // !_MSC_VER

BlockLocationRequest::BlockLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockLocationRequest)
}

void BlockLocationRequest::InitAsDefaultInstance() {
}

BlockLocationRequest::BlockLocationRequest(const BlockLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockLocationRequest)
}

void BlockLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockLocationRequest::~BlockLocationRequest() {
  // @@protoc_insertion_point(destructor:BlockLocationRequest)
  SharedDtor();
}

void BlockLocationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockLocationRequest_descriptor_;
}

const BlockLocationRequest& BlockLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

BlockLocationRequest* BlockLocationRequest::default_instance_ = NULL;

BlockLocationRequest* BlockLocationRequest::New() const {
  return new BlockLocationRequest;
}

void BlockLocationRequest::Clear() {
  blocknums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockLocationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 blockNums = 1;
      case 1: {
        if (tag == 8) {
         parse_blockNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_blocknums())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blocknums())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_blockNums;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockLocationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockLocationRequest)
  return false;
#undef DO_
}

void BlockLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockLocationRequest)
  // repeated int32 blockNums = 1;
  for (int i = 0; i < this->blocknums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->blocknums(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlockLocationRequest)
}

::google::protobuf::uint8* BlockLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockLocationRequest)
  // repeated int32 blockNums = 1;
  for (int i = 0; i < this->blocknums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->blocknums(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockLocationRequest)
  return target;
}

int BlockLocationRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 blockNums = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocknums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blocknums(i));
    }
    total_size += 1 * this->blocknums_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockLocationRequest::MergeFrom(const BlockLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocknums_.MergeFrom(from.blocknums_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockLocationRequest::CopyFrom(const BlockLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLocationRequest::IsInitialized() const {

  return true;
}

void BlockLocationRequest::Swap(BlockLocationRequest* other) {
  if (other != this) {
    blocknums_.Swap(&other->blocknums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockLocationRequest_descriptor_;
  metadata.reflection = BlockLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockLocationResponse::kStatusFieldNumber;
const int BlockLocationResponse::kBlockLocationsFieldNumber;
#endif  // !_MSC_VER

BlockLocationResponse::BlockLocationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockLocationResponse)
}

void BlockLocationResponse::InitAsDefaultInstance() {
}

BlockLocationResponse::BlockLocationResponse(const BlockLocationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockLocationResponse)
}

void BlockLocationResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockLocationResponse::~BlockLocationResponse() {
  // @@protoc_insertion_point(destructor:BlockLocationResponse)
  SharedDtor();
}

void BlockLocationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockLocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockLocationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockLocationResponse_descriptor_;
}

const BlockLocationResponse& BlockLocationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

BlockLocationResponse* BlockLocationResponse::default_instance_ = NULL;

BlockLocationResponse* BlockLocationResponse::New() const {
  return new BlockLocationResponse;
}

void BlockLocationResponse::Clear() {
  status_ = 0;
  blocklocations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockLocationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockLocations;
        break;
      }

      // repeated .BlockLocations blockLocations = 2;
      case 2: {
        if (tag == 18) {
         parse_blockLocations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocklocations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blockLocations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockLocationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockLocationResponse)
  return false;
#undef DO_
}

void BlockLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockLocationResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .BlockLocations blockLocations = 2;
  for (int i = 0; i < this->blocklocations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocklocations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BlockLocationResponse)
}

::google::protobuf::uint8* BlockLocationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockLocationResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .BlockLocations blockLocations = 2;
  for (int i = 0; i < this->blocklocations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blocklocations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockLocationResponse)
  return target;
}

int BlockLocationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .BlockLocations blockLocations = 2;
  total_size += 1 * this->blocklocations_size();
  for (int i = 0; i < this->blocklocations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocklocations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockLocationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockLocationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockLocationResponse::MergeFrom(const BlockLocationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocklocations_.MergeFrom(from.blocklocations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockLocationResponse::CopyFrom(const BlockLocationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLocationResponse::IsInitialized() const {

  return true;
}

void BlockLocationResponse::Swap(BlockLocationResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    blocklocations_.Swap(&other->blocklocations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockLocationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockLocationResponse_descriptor_;
  metadata.reflection = BlockLocationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignBlockRequest::kHandleFieldNumber;
#endif  // !_MSC_VER

AssignBlockRequest::AssignBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssignBlockRequest)
}

void AssignBlockRequest::InitAsDefaultInstance() {
}

AssignBlockRequest::AssignBlockRequest(const AssignBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssignBlockRequest)
}

void AssignBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignBlockRequest::~AssignBlockRequest() {
  // @@protoc_insertion_point(destructor:AssignBlockRequest)
  SharedDtor();
}

void AssignBlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssignBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignBlockRequest_descriptor_;
}

const AssignBlockRequest& AssignBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

AssignBlockRequest* AssignBlockRequest::default_instance_ = NULL;

AssignBlockRequest* AssignBlockRequest::New() const {
  return new AssignBlockRequest;
}

void AssignBlockRequest::Clear() {
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssignBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssignBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssignBlockRequest)
  return false;
#undef DO_
}

void AssignBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssignBlockRequest)
  // optional int32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssignBlockRequest)
}

::google::protobuf::uint8* AssignBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssignBlockRequest)
  // optional int32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssignBlockRequest)
  return target;
}

int AssignBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignBlockRequest::MergeFrom(const AssignBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignBlockRequest::CopyFrom(const AssignBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignBlockRequest::IsInitialized() const {

  return true;
}

void AssignBlockRequest::Swap(AssignBlockRequest* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignBlockRequest_descriptor_;
  metadata.reflection = AssignBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignBlockResponse::kStatusFieldNumber;
const int AssignBlockResponse::kNewBlockFieldNumber;
#endif  // !_MSC_VER

AssignBlockResponse::AssignBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AssignBlockResponse)
}

void AssignBlockResponse::InitAsDefaultInstance() {
  newblock_ = const_cast< ::BlockLocations*>(&::BlockLocations::default_instance());
}

AssignBlockResponse::AssignBlockResponse(const AssignBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AssignBlockResponse)
}

void AssignBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  newblock_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignBlockResponse::~AssignBlockResponse() {
  // @@protoc_insertion_point(destructor:AssignBlockResponse)
  SharedDtor();
}

void AssignBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete newblock_;
  }
}

void AssignBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignBlockResponse_descriptor_;
}

const AssignBlockResponse& AssignBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

AssignBlockResponse* AssignBlockResponse::default_instance_ = NULL;

AssignBlockResponse* AssignBlockResponse::New() const {
  return new AssignBlockResponse;
}

void AssignBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_newblock()) {
      if (newblock_ != NULL) newblock_->::BlockLocations::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AssignBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newBlock;
        break;
      }

      // optional .BlockLocations newBlock = 2;
      case 2: {
        if (tag == 18) {
         parse_newBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newblock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AssignBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AssignBlockResponse)
  return false;
#undef DO_
}

void AssignBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AssignBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .BlockLocations newBlock = 2;
  if (has_newblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newblock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AssignBlockResponse)
}

::google::protobuf::uint8* AssignBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssignBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .BlockLocations newBlock = 2;
  if (has_newblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newblock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssignBlockResponse)
  return target;
}

int AssignBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .BlockLocations newBlock = 2;
    if (has_newblock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newblock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignBlockResponse::MergeFrom(const AssignBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_newblock()) {
      mutable_newblock()->::BlockLocations::MergeFrom(from.newblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignBlockResponse::CopyFrom(const AssignBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignBlockResponse::IsInitialized() const {

  return true;
}

void AssignBlockResponse::Swap(AssignBlockResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(newblock_, other->newblock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignBlockResponse_descriptor_;
  metadata.reflection = AssignBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListFilesRequest::kDirNameFieldNumber;
#endif  // !_MSC_VER

ListFilesRequest::ListFilesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListFilesRequest)
}

void ListFilesRequest::InitAsDefaultInstance() {
}

ListFilesRequest::ListFilesRequest(const ListFilesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ListFilesRequest)
}

void ListFilesRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListFilesRequest::~ListFilesRequest() {
  // @@protoc_insertion_point(destructor:ListFilesRequest)
  SharedDtor();
}

void ListFilesRequest::SharedDtor() {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirname_;
  }
  if (this != default_instance_) {
  }
}

void ListFilesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListFilesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListFilesRequest_descriptor_;
}

const ListFilesRequest& ListFilesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

ListFilesRequest* ListFilesRequest::default_instance_ = NULL;

ListFilesRequest* ListFilesRequest::New() const {
  return new ListFilesRequest;
}

void ListFilesRequest::Clear() {
  if (has_dirname()) {
    if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dirname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListFilesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListFilesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dirName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dirname().data(), this->dirname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dirname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListFilesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListFilesRequest)
  return false;
#undef DO_
}

void ListFilesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListFilesRequest)
  // optional string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListFilesRequest)
}

::google::protobuf::uint8* ListFilesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ListFilesRequest)
  // optional string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListFilesRequest)
  return target;
}

int ListFilesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dirName = 1;
    if (has_dirname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListFilesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListFilesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListFilesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListFilesRequest::MergeFrom(const ListFilesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirname()) {
      set_dirname(from.dirname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListFilesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFilesRequest::CopyFrom(const ListFilesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFilesRequest::IsInitialized() const {

  return true;
}

void ListFilesRequest::Swap(ListFilesRequest* other) {
  if (other != this) {
    std::swap(dirname_, other->dirname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListFilesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListFilesRequest_descriptor_;
  metadata.reflection = ListFilesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListFilesResponse::kStatusFieldNumber;
const int ListFilesResponse::kFileNamesFieldNumber;
#endif  // !_MSC_VER

ListFilesResponse::ListFilesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListFilesResponse)
}

void ListFilesResponse::InitAsDefaultInstance() {
}

ListFilesResponse::ListFilesResponse(const ListFilesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ListFilesResponse)
}

void ListFilesResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListFilesResponse::~ListFilesResponse() {
  // @@protoc_insertion_point(destructor:ListFilesResponse)
  SharedDtor();
}

void ListFilesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListFilesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListFilesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListFilesResponse_descriptor_;
}

const ListFilesResponse& ListFilesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

ListFilesResponse* ListFilesResponse::default_instance_ = NULL;

ListFilesResponse* ListFilesResponse::New() const {
  return new ListFilesResponse;
}

void ListFilesResponse::Clear() {
  status_ = 0;
  filenames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListFilesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileNames;
        break;
      }

      // repeated string fileNames = 2;
      case 2: {
        if (tag == 18) {
         parse_fileNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filenames(this->filenames_size() - 1).data(),
            this->filenames(this->filenames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filenames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileNames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListFilesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListFilesResponse)
  return false;
#undef DO_
}

void ListFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListFilesResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated string fileNames = 2;
  for (int i = 0; i < this->filenames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->filenames(i).data(), this->filenames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "filenames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filenames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListFilesResponse)
}

::google::protobuf::uint8* ListFilesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ListFilesResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated string fileNames = 2;
  for (int i = 0; i < this->filenames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filenames(i).data(), this->filenames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filenames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->filenames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListFilesResponse)
  return target;
}

int ListFilesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated string fileNames = 2;
  total_size += 1 * this->filenames_size();
  for (int i = 0; i < this->filenames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListFilesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListFilesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListFilesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListFilesResponse::MergeFrom(const ListFilesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  filenames_.MergeFrom(from.filenames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListFilesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFilesResponse::CopyFrom(const ListFilesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFilesResponse::IsInitialized() const {

  return true;
}

void ListFilesResponse::Swap(ListFilesResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    filenames_.Swap(&other->filenames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListFilesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListFilesResponse_descriptor_;
  metadata.reflection = ListFilesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenFileRequest::kFileNameFieldNumber;
const int OpenFileRequest::kForReadFieldNumber;
#endif  // !_MSC_VER

OpenFileRequest::OpenFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpenFileRequest)
}

void OpenFileRequest::InitAsDefaultInstance() {
}

OpenFileRequest::OpenFileRequest(const OpenFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpenFileRequest)
}

void OpenFileRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forread_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenFileRequest::~OpenFileRequest() {
  // @@protoc_insertion_point(destructor:OpenFileRequest)
  SharedDtor();
}

void OpenFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void OpenFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenFileRequest_descriptor_;
}

const OpenFileRequest& OpenFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

OpenFileRequest* OpenFileRequest::default_instance_ = NULL;

OpenFileRequest* OpenFileRequest::New() const {
  return new OpenFileRequest;
}

void OpenFileRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    forread_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpenFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forRead;
        break;
      }

      // optional bool forRead = 2;
      case 2: {
        if (tag == 16) {
         parse_forRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forread_)));
          set_has_forread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpenFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpenFileRequest)
  return false;
#undef DO_
}

void OpenFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpenFileRequest)
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional bool forRead = 2;
  if (has_forread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpenFileRequest)
}

::google::protobuf::uint8* OpenFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFileRequest)
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional bool forRead = 2;
  if (has_forread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFileRequest)
  return target;
}

int OpenFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool forRead = 2;
    if (has_forread()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenFileRequest::MergeFrom(const OpenFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_forread()) {
      set_forread(from.forread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFileRequest::CopyFrom(const OpenFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFileRequest::IsInitialized() const {

  return true;
}

void OpenFileRequest::Swap(OpenFileRequest* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(forread_, other->forread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenFileRequest_descriptor_;
  metadata.reflection = OpenFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenFileResponse::kStatusFieldNumber;
const int OpenFileResponse::kHandleFieldNumber;
const int OpenFileResponse::kBlockInfoFieldNumber;
#endif  // !_MSC_VER

OpenFileResponse::OpenFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpenFileResponse)
}

void OpenFileResponse::InitAsDefaultInstance() {
}

OpenFileResponse::OpenFileResponse(const OpenFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpenFileResponse)
}

void OpenFileResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenFileResponse::~OpenFileResponse() {
  // @@protoc_insertion_point(destructor:OpenFileResponse)
  SharedDtor();
}

void OpenFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenFileResponse_descriptor_;
}

const OpenFileResponse& OpenFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

OpenFileResponse* OpenFileResponse::default_instance_ = NULL;

OpenFileResponse* OpenFileResponse::New() const {
  return new OpenFileResponse;
}

void OpenFileResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenFileResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(status_, handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  blockinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpenFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional int32 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockInfo;
        break;
      }

      // repeated .BlockLocations blockInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_blockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blockInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpenFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpenFileResponse)
  return false;
#undef DO_
}

void OpenFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpenFileResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }

  // repeated .BlockLocations blockInfo = 3;
  for (int i = 0; i < this->blockinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blockinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpenFileResponse)
}

::google::protobuf::uint8* OpenFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFileResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handle(), target);
  }

  // repeated .BlockLocations blockInfo = 3;
  for (int i = 0; i < this->blockinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blockinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFileResponse)
  return target;
}

int OpenFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

  }
  // repeated .BlockLocations blockInfo = 3;
  total_size += 1 * this->blockinfo_size();
  for (int i = 0; i < this->blockinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenFileResponse::MergeFrom(const OpenFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockinfo_.MergeFrom(from.blockinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFileResponse::CopyFrom(const OpenFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFileResponse::IsInitialized() const {

  return true;
}

void OpenFileResponse::Swap(OpenFileResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(handle_, other->handle_);
    blockinfo_.Swap(&other->blockinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenFileResponse_descriptor_;
  metadata.reflection = OpenFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadBlockRequest::kBlockNumberFieldNumber;
#endif  // !_MSC_VER

ReadBlockRequest::ReadBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadBlockRequest)
}

void ReadBlockRequest::InitAsDefaultInstance() {
}

ReadBlockRequest::ReadBlockRequest(const ReadBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadBlockRequest)
}

void ReadBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  blocknumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadBlockRequest::~ReadBlockRequest() {
  // @@protoc_insertion_point(destructor:ReadBlockRequest)
  SharedDtor();
}

void ReadBlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadBlockRequest_descriptor_;
}

const ReadBlockRequest& ReadBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

ReadBlockRequest* ReadBlockRequest::default_instance_ = NULL;

ReadBlockRequest* ReadBlockRequest::New() const {
  return new ReadBlockRequest;
}

void ReadBlockRequest::Clear() {
  blocknumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blockNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocknumber_)));
          set_has_blocknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadBlockRequest)
  return false;
#undef DO_
}

void ReadBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadBlockRequest)
  // optional int32 blockNumber = 1;
  if (has_blocknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blocknumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReadBlockRequest)
}

::google::protobuf::uint8* ReadBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadBlockRequest)
  // optional int32 blockNumber = 1;
  if (has_blocknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blocknumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadBlockRequest)
  return target;
}

int ReadBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blockNumber = 1;
    if (has_blocknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocknumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadBlockRequest::MergeFrom(const ReadBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocknumber()) {
      set_blocknumber(from.blocknumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadBlockRequest::CopyFrom(const ReadBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBlockRequest::IsInitialized() const {

  return true;
}

void ReadBlockRequest::Swap(ReadBlockRequest* other) {
  if (other != this) {
    std::swap(blocknumber_, other->blocknumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadBlockRequest_descriptor_;
  metadata.reflection = ReadBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadBlockResponse::kStatusFieldNumber;
const int ReadBlockResponse::kDataFieldNumber;
#endif  // !_MSC_VER

ReadBlockResponse::ReadBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadBlockResponse)
}

void ReadBlockResponse::InitAsDefaultInstance() {
}

ReadBlockResponse::ReadBlockResponse(const ReadBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadBlockResponse)
}

void ReadBlockResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadBlockResponse::~ReadBlockResponse() {
  // @@protoc_insertion_point(destructor:ReadBlockResponse)
  SharedDtor();
}

void ReadBlockResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadBlockResponse_descriptor_;
}

const ReadBlockResponse& ReadBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_project_2eproto();
  return *default_instance_;
}

ReadBlockResponse* ReadBlockResponse::default_instance_ = NULL;

ReadBlockResponse* ReadBlockResponse::New() const {
  return new ReadBlockResponse;
}

void ReadBlockResponse::Clear() {
  status_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadBlockResponse)
  return false;
#undef DO_
}

void ReadBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated bytes data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReadBlockResponse)
}

::google::protobuf::uint8* ReadBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadBlockResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated bytes data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadBlockResponse)
  return target;
}

int ReadBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated bytes data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadBlockResponse::MergeFrom(const ReadBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadBlockResponse::CopyFrom(const ReadBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadBlockResponse::IsInitialized() const {

  return true;
}

void ReadBlockResponse::Swap(ReadBlockResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadBlockResponse_descriptor_;
  metadata.reflection = ReadBlockResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

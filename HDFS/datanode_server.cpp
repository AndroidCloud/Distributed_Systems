/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include <stdio.h>
#include <rpc/rpc.h>
#include <bits/stdc++.h>
#include <sys/stat.h>
#include <chrono>
 #include <stdlib.h>
#include "project.pb.h"
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>

using namespace std;
using namespace std::chrono;

#include "datanode.h"

int deserializeBlockNumber(string data)
{
	ReadBlockRequest Request;
	Request.ParseFromString(data);
	//cout << Request.blocknumber() << endl;
	int blockNum = (int)Request.blocknumber();
	return blockNum;

}

char * convertStringToChar(string str)
{
	int len = str.size();
//	cout << len << endl;
	char *d = new char[len+1];
	for(int j=0;j<len;j++)d[j]=str[j];
	return d;
}
/*string convertCharToString(char *arg)
{

}
*/
string serializeReadBlockResponse(int blockNum)
{
	stringstream ss;
	ss << blockNum;
	string str = ss.str();

	ReadBlockResponse Response;
	Response.set_status(1);
	FILE *fp;
    char c;
    //cout << "filename" << str << endl;
    fp = fopen(str.c_str(), "r"); // error check this!

    while((c = fgetc(fp)) != EOF) {
    			string data="";
    			data = data+c;
    			Response.add_data(data);
    
               }

    

    fclose(fp);
    string op;
	if(!Response.SerializeToString(&op))
	{
		cerr << "Failed to write" <<endl;
		exit(0);
	}

	return op;
	

}

char ** readblock_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;
	if(*argp!=NULL)
	{
		string num(*argp);
		int blockNum = deserializeBlockNumber(num);
		string d = serializeReadBlockResponse(blockNum);
		result = convertStringToChar(d);
	}

	return &result;
}

char **
writeblock_1_svc(char **argp, struct svc_req *rqstp)
{
	static char * result;
	if(*argp!=NULL)
	{
		string data(*argp);
		WriteBlockRequest Request;
		Request.ParseFromString(data);
		if(Request.has_blockinfo())
		{
			int len = Request.data_size();
			BlockLocations bl = Request.blockinfo();
			int blockNum = bl.blocknumber();
			ofstream outfile;
  			outfile.open("blocks_info", std::ios_base::app);
  			string s2 = to_string(blockNum);
  			s2=s2+"\n";
  			outfile << s2;
  			outfile.close();
  	
			char buffer [33];
		  	snprintf(buffer, sizeof(buffer), "%d", blockNum);
			string s1="";
			ofstream out(buffer);
			for(int i=0;i<len;i++)
				{
					s1= s1+ Request.data(i)[0];

					if(i%1000==0 && s1.size()>0)
					{
					//	cout << i << endl;
						out << s1;
						s1.clear();
					}
				}
			if(s1.size()>0)out << s1;
			out.close();

			cout << " block " << blockNum << " written " << endl;
			
		}
	}

	/*
	 * insert server code here
	 */

	return &result;
}

